@model PaginatedList<Question>

<h1>Q&A</h1>
<div class="row">
@*    <div class="col-md-12">
        <form asp-action="Index" method="get" class="form-inline mb-3">
            <div class="form-group">
                <input type="text" name="searchTerm" class="form-control mr-2" placeholder="Search..." value="@ViewBag.SearchTerm" />
            </div>
            <button type="submit" class="btn btn-primary">Search</button>
        </form>
    </div>*@
    <div class="col-md-12">
        <form asp-action="Index" method="get" class="form-inline mt-1">
            <div class="form-group mb-2">
                <label class="sr-only">Search</label>
                <div class="input-group custom-search-box">
                    <input type="text" name="searchTerm" class="form-control" placeholder="Search..." value="@ViewBag.SearchTerm" />
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-primary">Search</button>
                    </div>
                </div>
            </div>
        </form>
    </div>


</div>
<p>
    <a asp-action="Create"><i class="fas fa-question-circle"></i> Ask a Question</a>
</p>
@if (TempData["isDeleted"] != null && (bool)TempData["isDeleted"])
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-trash-alt"></i> <strong>Success!</strong> Your item has been deleted.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<div class="row">
    @foreach (var question in Model.Items)
    {
        
            <div class="col-md-12 mb-4">
                <div class="card">
                <div class="card-body">
                    <h5 class="card-title"><i class="fas fa-question"></i> @question.Title</h5>
                    <p class="card-text"><i class="fas fa-quote-left"></i> @TruncateText(question.Content, 100)</p>

                    <p class="card-text">
                        <i class="fas fa-user"></i> <small class="text-muted">Posted By: @question.User.UserName</small>
                        <br />
                        <i class="fas fa-calendar-alt"></i> <small class="text-muted">Posted On: @question.CreationDate.ToString("yyyy-MM-dd")</small>
                    </p>
                    <a href="@Url.Action("Details", new { id = question.Id })" class="btn btn-primary">
                        <i class="fas fa-arrow-circle-right"></i> Read More
                    </a>
                </div>
            </div>
        </div>
        
    }
</div>

<div class="row mt-3">
    <div class="col-md-12">
        <nav>
            <ul class="pagination">
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item"><a class="page-link" href="@Url.Action("Index", new { page = Model.PageIndex - 1, searchTerm = ViewBag.SearchTerm })">Previous</a></li>
                }

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.PageIndex ? "active" : "")"><a class="page-link" href="@Url.Action("Index", new { page = i, searchTerm = ViewBag.SearchTerm })">@i</a></li>
                }

                @if (Model.HasNextPage)
                {
                    <li class="page-item"><a class="page-link" href="@Url.Action("Index", new { page = Model.PageIndex + 1, searchTerm = ViewBag.SearchTerm })">Next</a></li>
                }
            </ul>
        </nav>
    </div>
</div>



@functions {
    string TruncateText(string text, int maxLength)
    {
        if (text.Length <= maxLength)
        {
            return text;
        }
        else
        {
            return text.Substring(0, maxLength) + "...";
        }
    }
}



@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        function upvote(questionId) {
            axios.post('/QnA/Upvote', { questionId: questionId })
                .then(function (response) {
                    // Update the vote count on the page
                    var voteCountElement = document.querySelector(`#${questionId} .vote-count`);
                    voteCountElement.textContent = response.data.voteCount;
                })
                .catch(function (error) {
                    // Handle any errors
                    console.error(error);
                });
        }

        function downvote(questionId) {
            axios.post('/QnA/Downvote', { questionId: questionId })
                .then(function (response) {
                    // Update the vote count on the page
                    var voteCountElement = document.querySelector(`#${questionId} .vote-count`);
                    voteCountElement.textContent = response.data.voteCount;
                })
                .catch(function (error) {
                    // Handle any errors
                    console.error(error);
                });
        }
    </script>
}