@using System.Security.Claims;
@model Question

@{
    ViewData["Title"] = "Question Details";
}

<h1>Question Details</h1>
@if (TempData["isCreated"] != null && (bool)TempData["isCreated"])
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle"></i> <strong>Success!</strong> Your item has been created.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["isEdited"] != null && (bool)TempData["isEdited"])
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <i class="fas fa-pencil-alt"></i> <strong>Success!</strong> Your item has been edited.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}


<div class="card">
    <div class="card-body">
        <h5 class="card-title">@Model.Title</h5>
        <p class="card-text">@Model.Content</p>

        <p class="card-text">
            <small class="text-muted">Posted By: @Model.User.UserName</small>
            <br />
            <small class="text-muted">Posted On: @Model.CreationDate.ToString("yyyy-MM-dd")</small>
        </p>

        <div class="vote-buttons">
            @if (User.Identity.IsAuthenticated)
            {
                var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                var votedQuestion = Model.QuestionVotes.FirstOrDefault(v => v.UserId == userId);

                if (votedQuestion == null)
                {
                    <form asp-action="UpvoteQuestion" asp-route-questionId="@Model.Id">
                        <button type="submit" class="btn btn-outline-success"><i class="bi bi-arrow-up"></i> Upvote (@Model.Votes)</button>
                    </form>

                    <form asp-action="DownvoteQuestion" asp-route-questionId="@Model.Id">
                        <button type="submit" class="btn btn-outline-danger"><i class="bi bi-arrow-down"></i> Downvote (@Model.Votes)</button>
                    </form>
                }
                else
                {
                    var isUpvote = votedQuestion.IsUpvote;
                    var voteText = isUpvote ? "Upvoted" : "Downvoted";
                    var buttonColor = isUpvote ? "btn-success" : "btn-danger";
                    var buttonIcon = isUpvote ? "bi-arrow-up" : "bi-arrow-down";

                    <button type="button" class="btn @buttonColor" disabled><i class="bi @buttonIcon"></i> @voteText (@Model.Votes)</button>
                }
            }
        </div>
    </div>
</div>

@if (Model.Answers != null && Model.Answers.Any())
{
    <h2>Answers</h2>
    <div class="row">
        @foreach (var answer in Model.Answers)
        {
            <div class="col-md-6 col-lg-4">
                <div class="card mb-3">
                    <div class="card-body">
                        <h4 class="card-title">Answer</h4>
                        <p class="card-text">@TruncateText(answer.Content, 50)</p>
                        <div class="card-footer">
                            <div>Creation Date: @answer.CreationDate</div>
                            <div>Votes: @answer.Votes</div>
                            <div>Is Approved: @answer.IsApproved</div>
                            <a asp-action="Details" asp-controller="Answer" asp-route-id="@answer.Id" class="btn btn-primary">View Answer</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No answers available.</p>
}

@if (User.Identity.IsAuthenticated)
{
    <div class="mt-4">
        <a href="@Url.Action("Create", "Answer", new { questionId = Model.Id })" class="btn btn-primary">Answer</a>
        @if (Model.UserId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value)
        {
            <a href="@Url.Action("Edit", "QnA", new { id = Model.Id })" class="btn btn-secondary">Edit</a>
            <a href="@Url.Action("Delete", "QnA", new { id = Model.Id })" class="btn btn-danger">Delete</a>
        }
    </div>
}

@functions {
    string TruncateText(string text, int maxLength)
    {
        if (text.Length <= maxLength)
        {
            return text;
        }
        else
        {
            return text.Substring(0, maxLength) + "...";
        }
    }
}
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.16.0/dist/icons/bootstrap-icons.min.js"></script>
}
